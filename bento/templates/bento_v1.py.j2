import datetime
import numpy
import dash
import dash_table
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output, State, MATCH
import plotly.graph_objects as go

from bento.style import BentoStyle
from bento.graph import Graph
import bento.util as butil

# TODO merge the few dictutil items into bento util in bento repo
from bento.common import logger, dictutil

# Import the supplied data loading modules
{% for dataid, entry in data.items() %}
import {{entry['module']}} as {{dataid}}_data
{% endfor %}

logging = logger.fancy_logger(__name__)

logging.info("Creating the Dash application...")
app = dash.Dash("{{name}}")

# Need to suppress this for multi-page apps
app.config.suppress_callback_exceptions = True

# This should contain any non-interactive data prep required
logging.info("Loading the application data frames...")
_global_data = {
    {% for dataid, entry in data.items() %}
    "{{dataid}}": {{dataid}}_data.{{entry['call']}}(**{{entry['args']}}),
    {% endfor %}
    }

# Supported themes: light, dark, ...
classes = BentoStyle(theme_dict={{theme_spec}})

# The dictionary of help text, which gets overlaid onto banks when help is turned on
help_reference = {}

# --- Layout ---
# Top-level: A main div containing two children: appbar and page content
main_children = [
  dcc.Location(id="location", refresh=False),
  html.Link(rel="stylesheet", href="https://fonts.googleapis.com/icon?family=Material+Icons"),
  html.Div(
    [
      html.Div([
        html.H1("{{appbar.title}}", id='title', style=classes.h1),
        html.H5("{{appbar.subtitle}}", id='subtitle', style=classes.h5),
      ], style=classes.titles),
      {% if pages|length > 1 %}
        html.Div([
        {% for uid in pages %}
          dcc.Link(
              html.Button(butil.titlize("{{uid}}"), style=classes.button),
              href="/{{uid}}",
              style=classes.link),
        {% endfor %}
        {% if show_help %}
          html.I("help_outline", id="helpbtn", className="material-icons", style=classes.icon),
        {% endif %}
          ], style=classes.link_set),
      {% endif %}
      html.Div("APPBAR", id={'type': 'help', 'idx': 'appbar'}, style=classes.bento_help),
      ], style={**classes.appbar, "backgroundImage": "url('assets/{{appbar.image}}')"}),
  html.Div(id="page", style=classes.page),
  ]
app.layout = html.Div(children=main_children, id="main", style=classes.main)

# Define the banks that comprise the pages (assembled into a grid later)
# Each bank is a 2-d list of dash components
{% for bank_id, bank in banks.items() %}
{{bank_id}} = [
  {% for bar in bank %}
  html.Div([
    {% for component in bar %}
    html.Div([
      {% if component.label %}
        html.Label("{{component.label}}", style=classes.label),
      {% endif %}
      dcc.Loading(
          {{component.lib}}.{{component.component}}(
          {% set class = component.args.pop("class", None) %}
          {% if class %} 
            style=classes.{{class}},
          {% endif %}
          {% set options = component.args.pop("overflow", None) %}
          {% if options %} 
            **{{options}},
          {% endif %}
	    **{{component.args}}),
          type="default",
          ),
    ], 
    style={**classes.{{component.lib}}, **classes.block}),
    {% endfor %}
  ], style=classes.bar, className=classes.spec['class_name']),
  {% endfor %}
]

{% endfor %}

# Each page definition is a grid of bootstrap Rows and Cols containing Banks
{% for page_id, page in pages.items() %}
{{page_id}}_page = html.Div(id='{{page_id}}', children=[
  {% if page.intro %}
  # TODO Insert a new page explanation section (not using dbc.Modal)
  {% endif %}
    {% if page.sidebar %}
    html.Div([
      {% for bank in page.sidebar %}
      html.Details([
        html.Summary("{{bank.title}}", style=classes.summary),
        *{{bank.bankid}},
        ], open={{bank.open|default(True)}}),
      {% endfor %}
      ], style={"gridColumn": "1 / 4", **classes.paper}),
    {% endif %}
    {% for bank in page.banks %}
    html.Div({{bank.bankid}} + [
      html.Div(help_reference.get("{{bank.bankid}}", "{{bank.bankid}}"),
	  id={'type': 'help', 'idx': "{{bank.bankid}}"}, style=classes.bento_help)
      ],
      style={"gridColumn": "{{bank.column}} / span {{bank.width}}", **classes.paper}),
    {% endfor%}
],
  style=classes.grid)
{% endfor %}

# Bundle the pages together for use in the Location callback
page_index = {
{% for uid, page in pages.items() %}
  "{{uid}}": {{uid}}_page,
{% endfor %}
}

# Stores info like the titles to use for each page
page_context = {
{% for uid, page in pages.items() %}
  "{{uid}}": {
      "title": "{{page.title}}",
      "subtitle": "{{page.subtitle}}",
      },
{% endfor %}
}

# --- Callbacks ---
@app.callback(
        [Output("title", "children"), Output("subtitle", "children")],
        [Input("location", "pathname")])
def update_title(*args):
    # Presumes only a simple url is passed in, probably enough for a template
    page_id = args[0].replace("/", "") if args[0] else "default"
    title = page_context.get(page_id, {}).get("title") or "{{appbar.title}}"
    subtitle = page_context.get(page_id, {}).get("subtitle") or "{{appbar.subtitle}}"
    return title, subtitle

@app.callback(
        Output({'type': 'help', 'idx': MATCH}, "style"),
        [Input("helpbtn", "n_clicks")],
        [State({'type': 'help', 'idx': MATCH}, "style")]
)
def update_help_overlay(n_clicks, style):
    # Presumes only a simple url is passed in, probably enough for a template
    if n_clicks and n_clicks % 2:
	style['display'] = 'block'
    else:
	style['display'] = 'None'
    return style

{% for uid, conn in connectors.items() %}
@app.callback(
  {% if conn.outputs|length == 1 %}
    Output{{conn.outputs[0]}}, [
  {% else %}
  [
    {% for out in conn.outputs|sort %}
    Output{{out}},
    {% endfor %}
  ], [
  {% endif %}
  {% for inp in conn.inputs|sort %}
    Input{{inp}},
  {% endfor %}
  ])
def {{callbacks[uid].name}}(*args):
{{callbacks[uid].code}}
{% endfor %}

logging.info("Application loaded!")

if __name__ == '__main__':
    app.run_server(debug=False)

